var documenterSearchIndex = {"docs":
[{"location":"api/#Corpuscles.jl","page":"API","title":"Corpuscles.jl","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"A Julia package to get access to the PDG particle data.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#Corpuscles.PDGID","page":"API","title":"Corpuscles.PDGID","text":"PDG IDs consist of 7 digits prefixed by a sign, following the scheme:\n\n+/- N Nr Nl Nq1 Nq2 Nq3 Nj\n\nThose are accessible as fields. There are PDG IDs with more than 7 digits for non-standard particles such as Q-balls. To support those, we follow the implementation in the SciKit-HEP particle Python package, which introduced N8, N9 and N10.\n\n\n\n\n\n","category":"type"},{"location":"api/#Corpuscles.Particle","page":"API","title":"Corpuscles.Particle","text":"Particle(name::String)\n\nConstruct particles from PDG name.\n\nOr commonly alias, alias do not cover all particles.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.isvalid-Tuple{PDGID}","page":"API","title":"Base.isvalid","text":"isvalid(p::PDGID)\n\nReturns true if the PDG ID is valid.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.A-Tuple{Any}","page":"API","title":"Corpuscles.A","text":"A(p::Union{Particle, PDGID, Integer})\n\nReturns the atomic number A if the PDG ID corresponds to a nucleus, else it returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.J-Tuple{Any}","page":"API","title":"Corpuscles.J","text":"J(p::Union{Particle, PDGID, Integer})\n\nReturns the total spin J.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.L-Tuple{Any}","page":"API","title":"Corpuscles.L","text":"L(p::Union{Particle, PDGID, Integer})\n\nReturns the orbital angular momentum L.\n\nThis is valid for mesons only. nothing is returned otherwise. Mesons with PDGIDs of the kind 9XXXXXX (N=9) are not experimentally well-known particles and nothing is returned too.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.S-Tuple{Any}","page":"API","title":"Corpuscles.S","text":"S(p::Union{Particle, PDGID, Integer})\n\nReturns the spin S.\n\nThis is valid for mesons only. nothing is returned otherwise. Mesons with PDGIDs of the kind 9XXXXXX (N=9) are not experimentally well-known particles and nothing is returned too.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.Z-Tuple{Any}","page":"API","title":"Corpuscles.Z","text":"Z(p::Union{Particle, PDGID, Integer})\n\nReturns the charge Z if the PDG ID corresponds to a nucleus, else it returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles._generatename-NTuple{4, Any}","page":"API","title":"Corpuscles._generatename","text":"_generatename(name, pdgid, antiprop, charge)\n\n\nGenerate a name for the particle, adding tilde if anti and -/+ according to the charge.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles._hasquark-Tuple{Any, Integer}","page":"API","title":"Corpuscles._hasquark","text":"_hasquark(p:::Union{Particle, PDGID, Integer}, q::Integer)\n\nNote that q is always positive, so [1, 6] for Standard Model quarks and [7, 8] for fourth-generation quarks.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.available_catalog_files-Tuple{}","page":"API","title":"Corpuscles.available_catalog_files","text":"available_catalog_files()\n\n\nFunction to get the available catalog files which are available within the package and returns a list with the absolute filepaths.\n\nExamples\n\njulia> Corpuscles.available_catalog_files()\n[\"/home/foobar/dev/Corpuscles.jl/data/particle2019.csv\"]\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.charge-Tuple{Any}","page":"API","title":"Corpuscles.charge","text":"charge(p::Union{Particle, PDGID, Integer})\n\nReturns the EM charge.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.fundamentalid-Tuple{Any}","page":"API","title":"Corpuscles.fundamentalid","text":"fundamentalid(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.hasbottom-Tuple{Any}","page":"API","title":"Corpuscles.hasbottom","text":"hasbottom(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.hascharm-Tuple{Any}","page":"API","title":"Corpuscles.hascharm","text":"hascharm(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.hasdown-Tuple{Any}","page":"API","title":"Corpuscles.hasdown","text":"hasdown(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.hasfundamentalanti-Tuple{Any}","page":"API","title":"Corpuscles.hasfundamentalanti","text":"hasfundamentalanti(p::Union{Particle, PDGID, Integer})\n\nIf this is a fundamental particle, does it have a valid antiparticle?\n\nNotes\n\nBased on the current list of defined particles/concepts in the PDG Monte Carlo Particle Numbering Scheme document.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.hasstrange-Tuple{Any}","page":"API","title":"Corpuscles.hasstrange","text":"hasstrange(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.hastop-Tuple{Any}","page":"API","title":"Corpuscles.hastop","text":"hastop(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.hasup-Tuple{Any}","page":"API","title":"Corpuscles.hasup","text":"hasdown(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isQball-Tuple{Any}","page":"API","title":"Corpuscles.isQball","text":"isQball(p::Union{Particle, PDGID, Integer})\n\nDoes this PDG ID correspond to a Q-ball or any exotic particle with electric charge beyond the qqq scheme? Ad-hoc numbering for such particles is +/- 100XXXY0, where XXX.Y is the charge.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isRhadron-Tuple{Any}","page":"API","title":"Corpuscles.isRhadron","text":"isRhadron(p::Union{Particle, PDGID, Integer})\n\nAn R-hadron is of the form 10abcdj, 100abcj, or 1000abj, where j = 2J + 1 gives the spin; b, c, and d are quarks or gluons; and a (the digit following the zero's) is a SUSY particle.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isSUSY-Tuple{Any}","page":"API","title":"Corpuscles.isSUSY","text":"isSUSY(p::Union{Particle, PDGID, Integer})\n\nFundamental SUSY particles have N = 1 or 2.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isbaryon-Tuple{Any}","page":"API","title":"Corpuscles.isbaryon","text":"isbaryon(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.iscompositequarkorlepton-Tuple{Any}","page":"API","title":"Corpuscles.iscompositequarkorlepton","text":"iscompositequarkorlepton(p::Union{Particle, PDGID, Integer})\n\nExcited (composite) quarks and leptons have N = 4 and Nr = 0.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isdiquark-Tuple{Any}","page":"API","title":"Corpuscles.isdiquark","text":"isdiquark(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isdyon-Tuple{Any}","page":"API","title":"Corpuscles.isdyon","text":"isdyon(p::Union{Particle, PDGID, Integer})\n\nMagnetic monopoles and Dyons are assumed to have one unit of Dirac monopole charge and a variable integer number xyz units of electric charge, where xyz stands for Nq1 Nq2 Nq3. Codes 411xyz0 are used when the magnetic and electrical charge sign agree and 412xyz0 when they disagree, with the overall sign of the particle set by the magnetic charge. For now, no spin information is provided.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isfundamental-Tuple{Any}","page":"API","title":"Corpuscles.isfundamental","text":"isfundamental(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isgaugebosonorhiggs-Tuple{Any}","page":"API","title":"Corpuscles.isgaugebosonorhiggs","text":"isgaugebosonorhiggs(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isgeneratorspecific-Tuple{Any}","page":"API","title":"Corpuscles.isgeneratorspecific","text":"isgeneratorspecific(p::Union{Particle, PDGID, Integer})\n\nCodes 81-100 are reserved for generator-specific pseudoparticles and concepts. Codes 901-930, 1901-1930, 2901-2930, and 3901-3930 are for additional components of Standard Model parton distribution functions, where the latter three ranges are intended to distinguish left/right/longitudinal components. Codes 998 and 999 are reserved for GEANT tracking purposes.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.ishadron-Tuple{Any}","page":"API","title":"Corpuscles.ishadron","text":"ishadron(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.islepton-Tuple{Any}","page":"API","title":"Corpuscles.islepton","text":"islepton(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.ismeson-Tuple{Any}","page":"API","title":"Corpuscles.ismeson","text":"ismeson(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isnucleus-Tuple{Any}","page":"API","title":"Corpuscles.isnucleus","text":"isnucleus(p::Union{Particle, PDGID, Integer})\n\nIon numbers are +/- 10LZZZAAAI. AAA is A - total baryon number ZZZ is Z - total charge L is the total number of strange quarks. I is the isomer number, with I=0 corresponding to the ground state.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.ispentaquark-Tuple{Any}","page":"API","title":"Corpuscles.ispentaquark","text":"ispentaquark(p::Union{Particle, PDGID, Integer})\n\nPentaquark IDs are of the form +/- 9 Nr Nl Nq1 Nq2 Nq3 Nj, where Nj = 2J + 1 gives the spin and Nr Nl Nq1 Nq2 Nq3 denote the quark numbers in order Nr >= Nl >= Nq1 >= Nq2 and Nq3 gives the antiquark number.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isquark-Tuple{Any}","page":"API","title":"Corpuscles.isquark","text":"isquark(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.issmgaugebosonorhiggs-Tuple{Any}","page":"API","title":"Corpuscles.issmgaugebosonorhiggs","text":"issmgaugebosonorhiggs(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isspecial-Tuple{Any}","page":"API","title":"Corpuscles.isspecial","text":"isspecial(p::Union{Particle, PDGID, Integer})\n\nSpecial particle in the sense of the classification in the PDG MC particle numbering scheme document, hence the graviton, the DM (S = 0, 1/2, 1) particles, the reggeons (reggeon, pomeron and odderon), and all generator-specific pseudo-particles and concepts, see isgeneratorspecific.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.isstandard-Tuple{Any}","page":"API","title":"Corpuscles.isstandard","text":"isstandard(p::Union{Particle, PDGID, Integer})\n\nReturns true if the PDG ID of the particle follows the standard numbering scheme.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.istechnicolor-Tuple{Any}","page":"API","title":"Corpuscles.istechnicolor","text":"istechnicolor(p::Union{Particle, PDGID, Integer})\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.jspin-Tuple{Any}","page":"API","title":"Corpuscles.jspin","text":"jspin(p::Union{Particle, PDGID, Integer})\n\nReturns the total spin as 2J+1.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.lspin-Tuple{Any}","page":"API","title":"Corpuscles.lspin","text":"lspin(p::Union{Particle, PDGID, Integer})\n\nReturns the orbital angular momentum L as 2S+1.\n\nThis is valid for mesons only. nothing is returned otherwise. Mesons with PDGIDs of the kind 9XXXXXX (N=9) are not experimentally well-known particles and nothing is returned too.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.particles-Tuple{}","page":"API","title":"Corpuscles.particles","text":"particles()\n\n\nReturns the full list of particles from the currently selected catalog.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.sspin-Tuple{Any}","page":"API","title":"Corpuscles.sspin","text":"sspin(p::Union{Particle, PDGID, Integer})\n\nReturns the spin S as 2S+1.\n\nThis is valid for mesons only. nothing is returned otherwise. Mesons with PDGIDs of the kind 9XXXXXX (N=9) are not experimentally well-known particles and nothing is returned too.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.threecharge-Tuple{Any}","page":"API","title":"Corpuscles.threecharge","text":"threecharge(p::Union{Particle, PDGID, Integer})\n\nReturns 3 times the EM charge.\n\n\n\n\n\n","category":"method"},{"location":"api/#Corpuscles.use_catalog_file-Tuple{AbstractString}","page":"API","title":"Corpuscles.use_catalog_file","text":"use_catalog_file(filepath)\n\n\nThis function reads a given catalog file and sets it as reference\n\nArguments\n\nfilepath::AbstractString: filepath to the catalog file\n\nExamples\n\njulia> Corpuscles.use_catalog_file(\"/home/foobar/dev/Corpuscles.jl/data/particle2019.csv\")\n\n\n\n\n\n","category":"method"},{"location":"acknowledgements/#Acknowledgements","page":"Acknowledgements","title":"Acknowledgements","text":"","category":"section"},{"location":"acknowledgements/","page":"Acknowledgements","title":"Acknowledgements","text":"This project uses data files which are part of the particle Python package, developed by the Scikit-HEP group. Many thanks for the permission!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: ) (Image: )","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Codecov) (Image: DOI)","category":"page"},{"location":"#Corpuscles.jl","page":"Introduction","title":"Corpuscles.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Corpuscles.jl is a package which gives easy access to particle properties and identification codes summarised and defined by the Particle Data Group (PDG) collaboration. The cleaned CSV versions of these data are provided by courtesy of the Scikit-HEP project and are part of the Particle Python module which inspired us to create a similar package for the Julia Language. Corpuscles.jl is by far not as feature complete as Particle, but we add functionality continuously, as needed. Feel free to create an Issue or pull request if you find any bugs or have suggestions to improve.","category":"page"},{"location":"#Usage","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The Particle struct can be used to create a particle. If an integer value is passed, it will be interpreted as PDG ID, which is the primary particle encoding in Corpuscles.jl:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Corpuscles\n\njulia> p = Particle(12)\nParticle(12) 'nu(e)'","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To get an overview of the available particle information, use print():","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> print(p)\nName:    K(4)*(2045)\nPDG ID:  -319\nLaTeX:   $\\bar{K}_{4}^{*}(2045)^{0}$\nStatus:  Common\nWidth = 198.0 MeV ± 30.0 MeV\nQ (charge) = 0//1 e\nComposition = Ds\nIsospin = 1//2\nMass = 2045.0 MeV ± 9.0 MeV\nP (space parity) = 1","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The properties are accessible via attributes:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> fieldnames(Particle)\n(:pdgid, :mass, :width, :charge, :isospin, :parity, :gparity, :cparity, :antiprop, :rank, :status, :name, :quarks, :latex)\n\njulia> p.quarks\n\"Ds\"\n\njulia> p.isospin\n1//2\n\njulia> p.mass\n2045.0 MeV ± 9.0 MeV","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"There are tons of helper functions to check other properties:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> filter(hasstrange, particles())\n257-element Array{Particle,1}:\n Particle(3224) Sigma(1385)\n Particle(23124) Lambda(1890)\n Particle(-13324) Xi(1820)\n Particle(-329) K(4)*(2045)\n ⋮\n Particle(13124) Lambda(1690)\n Particle(-100321) K(1460)\n Particle(20433) D(s1)(2460)\njulia> filter(islepton, particles())\n16-element Array{Particle,1}:\n Particle(18) nu(tau')\n Particle(15) tau\n Particle(11) e\n Particle(13) mu\n Particle(14) nu(mu)\n Particle(17) tau'\n ⋮\n Particle(12) nu(e)\n Particle(-14) nu(mu)\n Particle(-16) nu(tau)\n Particle(-12) nu(e)\n Particle(-13) mu","category":"page"},{"location":"#Units","page":"Introduction","title":"Units","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"For some properties like mass and width we use the Unitful package, which makes it easy to combine values with physical units:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> typeof(p.mass)\nCorpuscles.MeasuredValue{𝐋^2 𝐌 𝐓^-2}\n\njulia> p.mass\n2045.0 MeV ± 9.0 MeV\n\njulia> p.mass.value\n2045.0 MeV\n\njulia> p.mass.lower_limit\n9.0 MeV\n\njulia> p.mass.upper_limit\n9.0 MeV","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"and also Base.isless and Base.isapprox are implemented so that the lower and upper limits are taken into account, as seen here:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Unitful\n\njulia> p.mass\n2045.0 MeV ± 9.0 MeV\n\njulia> p.mass > 2036u\"MeV\"\nfalse\n\njulia> p.mass > 2035u\"MeV\"\ntrue","category":"page"},{"location":"#Particle-Codes","page":"Introduction","title":"Particle Codes","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Corpuscles currently supports conversions of Pythia and Geant3 codes to PDG using the Pythia and Geant3ID types. The corresponding number is simply passed to the type and then to the Particle itself. The PDG ID will be converted if possible, otherwise an error will be raised.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> Particle(Geant3ID(5))\nParticle(-13) 'mu'","category":"page"},{"location":"#Finding-Particles","page":"Introduction","title":"Finding Particles","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The particles() functions returns a Vector containing all the particles of the currently selected catalog. To search for particles, the filter() function comes in hand which can be combined with string comparison functions like startswith() or occursin().","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Here is an example how to find all particles with names starting with \"nu\":","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> filter(p->startswith(p.name, \"nu\"), particles())\n6-element Array{Particle,1}:\n Particle(-14) 'nu(mu)'\n Particle(-16) 'nu(tau)'\n Particle(-12) 'nu(e)'\n Particle(14) 'nu(mu)'\n Particle(16) 'nu(tau)'\n Particle(12) 'nu(e)'","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A more powerful way to filter particles based on patterns in their name is using regular expressions with e.g. occursin():","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> filter(p->occursin(r\"D\\(\\d*\\)\", p.name), particles())\n10-element Array{Particle,1}:\n Particle(-10421) 'D(0)*(2300)'\n Particle(-10411) 'D(0)*(2300)'\n Particle(425) 'D(2)*(2460)'\n Particle(10411) 'D(0)*(2300)'\n Particle(10421) 'D(0)*(2300)'\n Particle(10423) 'D(1)(2420)'\n Particle(-425) 'D(2)*(2460)'\n Particle(-10423) 'D(1)(2420)'\n Particle(415) 'D(2)*(2460)'\n Particle(-415) 'D(2)*(2460)'","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Another useful feature is the Particle(n::String, anti=false) which directly creates a (anti-)particle from a given name – as long as it exists in the currently loaded particle dataset:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> Particle(\"mu\") == Particle(13)\ntrue\n\njulia> -Particle(\"mu\") == Particle(-13)\ntrue\n\njulia> Particle(\"anti-mu\") == Particle(-13)\ntrue\n\njulia> Particle(\"mu~\") == Particle(-13)\ntrue\n\njulia> Particle(\"muon\") == Particle(13)\ntrue\n\njulia> Particle(\"mu-\") == Particle(13)\ntrue\n\njulia> Particle(\"mu+\") == -Particle(13)\ntrue","category":"page"},{"location":"helpers/#Helper-Functions","page":"Helper Functions","title":"Helper Functions","text":"","category":"section"},{"location":"helpers/","page":"Helper Functions","title":"Helper Functions","text":"There are many useful functions available to check additional properties of particles, like their types, composition, charge etc.","category":"page"},{"location":"helpers/","page":"Helper Functions","title":"Helper Functions","text":"All of them take either a Particle, a PDGID or a simple Integer (or anything which can be converted to an Integer) which represents a PDG ID, as input, so that the general API is the following:","category":"page"},{"location":"helpers/","page":"Helper Functions","title":"Helper Functions","text":"helperfunction(p::Union{Particle, PDGID, Integer})","category":"page"},{"location":"helpers/","page":"Helper Functions","title":"Helper Functions","text":"Here is a list of the currently available helper functions:","category":"page"},{"location":"helpers/","page":"Helper Functions","title":"Helper Functions","text":"hasup(p)\nhasdown(p)\nhasstange(p)\nhascharm(p)\nhasbottom(p)\nhastop(p)\nisquark(p)\nisstandard(p)\nisfundamental(p)\nfundamentalid(p)\nislepton(p)\nismeson(p)\nisbaryon(p)\nishadron(p)\nisRhadron(p)\nisSUSY(p)\nispentaquark(p)\nisgaugebosonorhiggs(p)\nissmgaugebosonorhiggs(p)\nistechnicolor(p)\niscompositequarkorlepton(p)\nisdyon(p)\nisdiquark(p)\nisgeneratorspecific(p)\nisspecial(p)\nisQball(p)\nhasfundamentalanti(p)\nisnucleus(p)\nA(p)\nZ(p)","category":"page"}]
}
